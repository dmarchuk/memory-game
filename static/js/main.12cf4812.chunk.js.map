{"version":3,"sources":["constants.ts","components/Board/Board.tsx","utils/getAllCardNumbers.ts","utils/shuffleArrayOfNumbers.ts","components/Card/Card.tsx","components/GlobalStyle/GlobalStyle.ts","components/SuccessMessage/SuccessMessage.tsx","App.tsx","index.tsx"],"names":["Color","Board","props","timeoutId","componentDidMount","reset","size","allCoordinates","numberOfCards","Array","fill","flatMap","_","index","randomCoordinates","map","a","Math","random","sort","b","setState","coordinates","solvedCards","isSolved","isCardCorrectChoice","id","state","flippedCardsIndexes","length","includes","resetFlippedCards","canFlip","flipCard","window","setTimeout","RESET_TIMEOUT_SECONDS","onClickHandler","event","render","BoardContainerElement","BoardElement","isFlipped","imageURL","isClickable","Card","key","handleFlip","this","clearTimeout","React","Component","styled","div","memo","CardContainerElement","onClick","data-test-id","CardElement","CardInnerElement","CardBackElement","ImageElement","src","alt","draggable","displayName","Silver","White","img","GlobalStyle","createGlobalStyle","AquaHaze","DarkGrey","SuccessMessage","useState","timer","setTimer","useEffect","interval","setInterval","secondsLeft","clearInterval","SuccessMessageElement","Green","App","Heading","ContainerElement","h1","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12cf4812.chunk.js","sourcesContent":["export const RESET_TIMEOUT_SECONDS = 5;\nexport const IMAGES_PATH = 'images';\n\nexport enum Color {\n    White = '#FFFFFF',\n    DarkGrey = '#464646',\n    Green = '#4BB543',\n    Silver = '#DBDBDB',\n    AquaHaze = '#F6F8FA',\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IMAGES_PATH, RESET_TIMEOUT_SECONDS } from '../../constants';\nimport { getAllCardNumbers, shuffleArrayOfNumbers } from '../../utils';\nimport { Card, SuccessMessage } from '../../components';\n\nexport interface BoardProps {\n    numberOfCards: number;\n}\n\nexport interface BoardState {\n    coordinates: number[];\n    flippedCardsIndexes: number[];\n    solvedCards: number[];\n    canFlip: boolean;\n    isSolved: boolean;\n}\n\nexport class Board extends React.Component<BoardProps, BoardState> {\n    private timeoutId: number | null = null;\n\n    constructor(props: BoardProps) {\n        super(props);\n\n        this.state = {\n            coordinates: [],\n            flippedCardsIndexes: [],\n            solvedCards: [],\n            canFlip: true,\n            isSolved: false,\n        };\n    }\n\n    componentDidMount = () => {\n        this.reset();\n    }\n\n    componentWillUnmount() {\n        if (this.timeoutId) {\n            window.clearTimeout(this.timeoutId);\n        }\n    }\n\n    reset = () => {\n        const allCoordinates = getAllCardNumbers(this.props.numberOfCards);\n        const randomCoordinates = shuffleArrayOfNumbers(allCoordinates);\n\n        this.setState({\n            coordinates: randomCoordinates,\n            solvedCards: [],\n            isSolved: false,\n        });\n    }\n\n    isCardCorrectChoice = (index: number, id: number) => {\n        const { coordinates, flippedCardsIndexes } = this.state;\n\n        if (flippedCardsIndexes.length === 0 || flippedCardsIndexes.includes(index)) {\n            return false;\n        }\n\n        const flippedCardIndex = flippedCardsIndexes[0];\n        const flippedCardId = coordinates[flippedCardIndex];\n        return flippedCardId === id;\n    }\n\n    resetFlippedCards = () => {\n        this.setState({\n            flippedCardsIndexes: [],\n            canFlip: true,\n        });\n    }\n\n    flipCard = (index: number, id: number) => {\n        let { solvedCards, flippedCardsIndexes, canFlip } = this.state;\n\n        const isCorrectChoice = this.isCardCorrectChoice(index, id);\n\n        if (isCorrectChoice) {\n            flippedCardsIndexes = [];\n            solvedCards = [...solvedCards, id];\n        } else if (flippedCardsIndexes.length <= 2) {\n            flippedCardsIndexes = [...flippedCardsIndexes, index];\n        }\n\n        const isSolved = this.props.numberOfCards === solvedCards.length;\n\n        if (isSolved) {\n            flippedCardsIndexes = [];\n            this.timeoutId = window.setTimeout(this.reset, RESET_TIMEOUT_SECONDS * 1000);\n        }\n\n        if (flippedCardsIndexes.length === 2) {\n            canFlip = false;\n            this.timeoutId = window.setTimeout(this.resetFlippedCards, 1000);\n        }\n\n        this.setState({\n            canFlip,\n            flippedCardsIndexes,\n            solvedCards,\n            isSolved,\n        });\n    }\n\n    onClickHandler = (event: React.MouseEvent<HTMLElement>, index: number, id: number) => {\n        const { canFlip } = this.state;\n\n        if (!canFlip) {\n            return;\n        }\n\n        this.flipCard(index, id);\n    }\n\n    render = () => {\n        const {\n            coordinates,\n            solvedCards,\n            flippedCardsIndexes,\n            canFlip,\n            isSolved,\n        } = this.state;\n\n        return (\n            <BoardContainerElement canFlip={canFlip}>\n                <BoardElement>\n                    {coordinates.map((id, index) => {\n                        const isFlipped = solvedCards.includes(id) || flippedCardsIndexes.includes(index);\n                        const imageURL = `${IMAGES_PATH}/img${id}.jpg`;\n                        const isClickable = !isFlipped && canFlip;\n\n                        return (\n                            <Card\n                                key={index}\n                                id={id}\n                                index={index}\n                                isFlipped={isFlipped}\n                                isClickable={isClickable}\n                                imageURL={imageURL}\n                                handleFlip={this.onClickHandler}\n                            />\n                        );\n                    })}\n                </BoardElement>\n                {isSolved ? <SuccessMessage /> : null}\n            </BoardContainerElement>\n        );\n    }\n}\n\ninterface BoardContainerElementProps {\n    canFlip: boolean;\n}\n\nexport const BoardContainerElement = styled.div<BoardContainerElementProps>`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    ${props => !(props.canFlip) && 'cursor: not-allowed;'}\n`;\n\nexport const BoardElement = styled.div`\n    display: grid;\n    width: 532px;\n    grid-template-columns: repeat(4, 1fr);\n    grid-auto-rows: var(4);\n    grid-gap: 8px;\n\n    &:before {\n        padding-top: 100%;\n    }\n`;\n","export const getAllCardNumbers = (size: number) => Array(size).fill(0).flatMap((_: number, index) => [index, index]);\n","export const shuffleArrayOfNumbers = (array: number[]) => array\n    .map(a => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map(a => a[1]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { Color } from '../../constants';\n\ninterface CardProps {\n    id: number;\n    index: number;\n    isFlipped: boolean;\n    isClickable: boolean;\n    imageURL: string;\n    handleFlip: (event: React.MouseEvent<HTMLDivElement>, index: number, id: number) => void;\n}\n\nexport const Card = memo(({ id, index, isFlipped, isClickable, imageURL, handleFlip }: CardProps) => {\n    const flipCard = (event: React.MouseEvent<HTMLDivElement>) => {\n        if (!isClickable) {\n            return;\n        }\n\n        handleFlip(event, index, id);\n    };\n\n    return (\n        <CardContainerElement onClick={flipCard} data-test-id=\"card-container\">\n            <CardElement isFlipped={isFlipped}>\n                <CardInnerElement isClickable={isClickable} />\n                <CardBackElement isClickable={isClickable}>\n                    <ImageElement src={imageURL} alt={imageURL} draggable={false} />\n                </CardBackElement>\n            </CardElement>\n        </CardContainerElement>\n    );\n});\n\nCard.displayName = 'Card';\n\nconst CARD_SIZE = '125px';\n\nconst CardContainerElement = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: ${CARD_SIZE};\n    height: ${CARD_SIZE};\n    font-size: 24px;\n    perspective: 1000px;\n`;\n\ninterface CardElementProps {\n    isFlipped: boolean;\n}\n\nconst CardElement = styled.div<CardElementProps>`\n    position: relative;\n    width: 100%;\n    height: 100%;\n    transition: transform 0.2s;\n    transform-style: preserve-3d;\n    will-change: transform;\n\n    ${props => props.isFlipped && 'transform: rotateY(180deg);'}\n`;\n\ninterface CardInnerElementProps {\n    isClickable: boolean;\n}\n\nconst CardInnerElement = styled.div<CardInnerElementProps>`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    border-radius: 8px;\n    border: 1px solid ${Color.Silver};\n    overflow: hidden;\n    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.05);\n    background-color: ${Color.White};\n    \n    ${props => props.isClickable && `\n        cursor: pointer;\n    \n        &:hover {\n            box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.3);\n        }\n    `}\n`;\n\nconst CardBackElement = styled(CardInnerElement)`\n    transform: rotateY(180deg);\n`;\n\nconst ImageElement = styled.img`\n    padding: 4px;\n    max-width: 100%;\n`;\n","import { createGlobalStyle } from 'styled-components';\nimport { Color } from '../../constants';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    font-family: 'Roboto Light', sans-serif;\n    background: ${Color.AquaHaze};\n    color: ${Color.DarkGrey};\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { RESET_TIMEOUT_SECONDS, Color } from '../../constants';\n\nexport const SuccessMessage = () => {\n    const [timer, setTimer] = useState(RESET_TIMEOUT_SECONDS);\n\n    useEffect(() => {\n        const interval = window.setInterval(() => {\n            setTimer(secondsLeft => {\n                if (secondsLeft === 1) {\n                    window.clearInterval(interval);\n                }\n\n                return secondsLeft - 1;\n            });\n        }, 1000);\n        return () => window.clearInterval(interval);\n    }, []);\n\n    return <SuccessMessageElement>Congratulations, you have solved the puzzle! The board will reset in {timer} seconds.</SuccessMessageElement>;\n};\n\nexport const SuccessMessageElement = styled.div`\n    padding: 16px;\n    color: ${Color.Green};\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Board, GlobalStyle } from './components';\n\nexport const App = () => (\n    <div>\n        <GlobalStyle />\n        <Heading>Memory game</Heading>\n        <ContainerElement>\n            <Board numberOfCards={8} />\n        </ContainerElement>\n    </div>\n);\n\nexport const Heading = styled.h1`\n    text-align: center;\n`;\n\nexport const ContainerElement = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}